{"version":3,"sources":["containers/LoginForm/LoginForm.module.css","containers/RegisterForm/RegisterForm.module.css","containers/LoginForm/LoginForm.js","containers/RegisterForm/RegisterForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginForm","props","state","username","password","error_message","inputChangeHandler","bind","formSubmitHandler","event","target","name","value","this","setState","preventDefault","console","log","alert_box","Alert","variant","className","classes","formWrapper","Form","id","formSignin","onSubmit","Image","alt","src","Label","htmlFor","srOnly","Control","type","placeholder","required","autoFocus","onChange","Button","block","size","to","footer","Component","withRouter","RegisterForm","formRegister","App","path","Boolean","window","location","hostname","match","app","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e6a4a327.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"LoginForm_formWrapper__1Mi4p\",\"formSignin\":\"LoginForm_formSignin___UbO9\",\"checkbox\":\"LoginForm_checkbox__T_Hcs\",\"form-control\":\"LoginForm_form-control__1FP0q\",\"footer\":\"LoginForm_footer__1fRHi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"RegisterForm_formWrapper__3i8Pf\",\"formRegister\":\"RegisterForm_formRegister__1Px6d\",\"checkbox\":\"RegisterForm_checkbox__3QSuj\",\"form-control\":\"RegisterForm_form-control__2ydRV\",\"footer\":\"RegisterForm_footer__2HiR4\"};","import React, { Component } from 'react';\nimport classes from './LoginForm.module.css';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport { withRouter } from 'react-router-dom';\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      error_message: '',\n    };\n    this.inputChangeHandler = this.inputChangeHandler.bind(this);\n    this.formSubmitHandler = this.formSubmitHandler.bind(this);\n  }\n\n  inputChangeHandler(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    if (this.state.error_message !== '') {\n      this.setState({ error_message: '' });\n    }\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  formSubmitHandler(event) {\n    event.preventDefault();\n    if (this.state.error_message !== '') {\n      this.setState({ error_message: '' });\n    }\n    console.log(this.state.username);\n    console.log(this.state.password);\n    // TODO: calling the register api\n  }\n\n  render() {\n    const alert_box =\n      this.state.error_message === '' ? null : (\n        <Alert variant=\"danger\">{this.state.error_message}</Alert>\n      );\n    return (\n      <div className={classes.formWrapper}>\n        <Form\n          id=\"login-form\"\n          className={classes.formSignin}\n          onSubmit={this.formSubmitHandler}\n        >\n          <Image\n            className=\"mb-4\"\n            alt=\"Mycroft - Water\"\n            src=\"/assets/logo.png\"\n          />\n          <h1 className=\"h3 mb-3\">Mycroft</h1>\n          {alert_box}\n          <Form.Label htmlFor=\"inputUsername\" srOnly={true}>\n            Username\n          </Form.Label>\n          <Form.Control\n            type=\"text\"\n            id=\"inputUsername\"\n            name=\"username\"\n            placeholder=\"Username\"\n            required\n            autoFocus\n            value={this.state.username}\n            onChange={this.inputChangeHandler}\n          />\n          <Form.Label htmlFor=\"inputPassword\" srOnly={true}>\n            Password\n          </Form.Label>\n          <Form.Control\n            type=\"password\"\n            id=\"inputPassword\"\n            name=\"password\"\n            placeholder=\"Password\"\n            required\n            value={this.state.password}\n            onChange={this.inputChangeHandler}\n          />\n          <Button type=\"submit\" block={true} size=\"lg\">\n            Sign in\n          </Button>\n          <Link to=\"/register\">Create an new account</Link>\n          <p className={'mt-3 mb-3 text-muted ' + classes.footer}>Team Water</p>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(LoginForm);\n","import React, { Component } from 'react';\nimport classes from './RegisterForm.module.css';\nimport { Link } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport { withRouter } from 'react-router-dom';\n\nclass RegisterForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      error_message: '',\n    };\n    this.inputChangeHandler = this.inputChangeHandler.bind(this);\n    this.formSubmitHandler = this.formSubmitHandler.bind(this);\n  }\n\n  inputChangeHandler(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    if (this.state.error_message !== '') {\n      this.setState({ error_message: '' });\n    }\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  formSubmitHandler(event) {\n    event.preventDefault();\n    if (this.state.error_message !== '') {\n      this.setState({ error_message: '' });\n    }\n    console.log(this.state.username);\n    console.log(this.state.password);\n    // TODO: calling the register api\n  }\n\n  render() {\n    const alert_box =\n      this.state.error_message === '' ? null : (\n        <Alert variant=\"danger\">{this.state.error_message}</Alert>\n      );\n    return (\n      <div className={classes.formWrapper}>\n        <Form\n          id=\"register-form\"\n          className={classes.formRegister}\n          onSubmit={this.formSubmitHandler}\n        >\n          <Image\n            className=\"mb-4\"\n            alt=\"Mycroft - Water\"\n            src=\"/assets/logo.png\"\n          />\n          <h1 className=\"h3 mb-3\">Mycroft</h1>\n          {alert_box}\n          <Form.Label htmlFor=\"inputUsername\" srOnly={true}>\n            Username\n          </Form.Label>\n          <Form.Control\n            type=\"text\"\n            id=\"inputUsername\"\n            name=\"username\"\n            placeholder=\"Username\"\n            required\n            autoFocus\n            value={this.state.username}\n            onChange={this.inputChangeHandler}\n          />\n          <Form.Label htmlFor=\"inputPassword\" srOnly={true}>\n            Password\n          </Form.Label>\n          <Form.Control\n            type=\"password\"\n            id=\"inputPassword\"\n            name=\"password\"\n            placeholder=\"Password\"\n            required\n            value={this.state.password}\n            onChange={this.inputChangeHandler}\n          />\n          <Button type=\"submit\" block={true} size=\"lg\">\n            Create an account\n          </Button>\n          <Link to=\"/login\">Sign in with an existing user</Link>\n          <p className={'mt-3 mb-3 text-muted ' + classes.footer}>Team Water</p>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(RegisterForm);\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport LoginForm from './containers/LoginForm/LoginForm';\nimport RegisterForm from './containers/RegisterForm/RegisterForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/login\">\n          <LoginForm />\n        </Route>\n        <Route path=\"/register\">\n          <RegisterForm />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nReactDOM.render(\n  <React.StrictMode>{app}</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}